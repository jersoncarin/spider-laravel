const { default: Swal } = require('sweetalert2')
window.Swal = Swal;

window.$ = window.jQuery = require('jquery')
window.PerfectScrollbar = require('perfect-scrollbar').default;
const popper = require('@popperjs/core');
const bs = require('bootstrap');
const sb = require('simplebar');
const bn = require('bootstrap-notify')
const axios = require('axios')
require('mediaelement/full')

const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content')

axios.defaults.headers.common = {
    'X-Requested-With': 'XMLHttpRequest',
    'X-CSRF-TOKEN' : token,
    'Content-Type' : 'application/json'
}

const pathname = window.location.pathname

var offset = 1
var max = 0
var first_scroll = false
var hasTop = false
var hasSubject = false
var hasTimeout = false
var hasLoaded = false

if(typeof subject_id !== "undefined") {

    $('.send-chat').submit(function(e) {
        e.preventDefault()
        let form = $(this)

        let message = form.find('.input_chat_message').val()

        send_chat(message,subject_id,(response) => {

            if(response.status) {
                hasLoaded = false
                load_chat(1,subject_id)
                form[0].reset()
            }
            
        })

    })

    $('#chat-box').on('scroll', function() {
        var scrollTop = $(this).scrollTop();
        if (scrollTop + $(this).innerHeight() >= this.scrollHeight) {

            //load_chat(1,subject_id)

            first_scroll = false
            

        } else if (scrollTop <= 0) {

            offset++

            if(!first_scroll || offset <= max) {
                load_chat(offset,subject_id)
                first_scroll = true
                hasTop = true
            }
            

        } else {

            hasTop = false;
        }

       
    })

    load_chat(1,subject_id)
    hasSubject = true

   
}

function load_chat(offset,subject_id) {

    axios.get('/user/ask/load?page=' + offset + '&s_id=' + subject_id + '&token=' + token)
    .then(response => {
        offset = response.data.chats.current_page
        max = response.data.chats.last_page

        response.data.chats.data.reverse()

        let isBottom = ''
        let isTop = ''

       $.each(response.data.chats.data,function(key,val) {


            if(hasTop) {

                isTop += ap_pre_pend(val)
                
            } else {

                isBottom += ap_pre_pend(val)
            }

       })

       if(!hasTop) {
            $('.chat-box').html(isBottom)
       } else {
            $('.chat-box').prepend($(isTop))
       }

       if(!hasTimeout || !hasLoaded) {
            scrollToBottom()
            hasLoaded = true
       }

    }).catch(error => console.log(error))
}


function scrollToBottom() {
    $(".chat-box").animate({ scrollTop: $('.chat-box').prop("scrollHeight")}, 1000);
}

const ap_pre_pend = (val) => {

    let monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
    "Jul","Aug", "Sep", "Oct", "Nov", "Dec"
    ];

    let role = ''
    let bg = 'bg-light'
    let text = 'text-muted'
    let img = '<img src="https://res.cloudinary.com/mhmd/image/upload/v1564960395/avatar_usae7z.svg" alt="user" width="50" class="rounded-circle">'
    
    if(val.sender == 'USER') {
        role = 'ml-auto'
        img = ''
        text = 'text-white'
        bg = 'bg-primary'
    }

    let date = new Date(val.created_at)

    let now = formatAMPM(date) + ' | ' + monthNames[date.getMonth()] + ' ' + addTrailingZeros(date.getDate())

    let data = '<div class="media w-50 ' +  role +' mb-3">' + img
    data += '<div class="media-body ml-3">'
    data += '<div class="' + bg + ' rounded py-2 px-3 mb-2">'
    data += '<p class="text-small mb-0 ' + text +'">' + val.message + '</p>'
    data += '</div>'
    data += '<p class="small text-muted">' + now +'</p>'
    data += '</div>'
    data += '</div>'

    return data
}

const addTrailingZeros = function(n) {
    return n < 10 ? '0' + n : n
}

const formatAMPM = function(date) {
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var ampm = hours >= 12 ? 'pm' : 'am';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0'+minutes : minutes;
    var strTime = hours + ':' + minutes + ' ' + ampm;
    return strTime;
  }
  


const send_chat = (message,subject_id,callable) => {
    axios.post('/user/ask/chat/send',{message:message , subject_id : subject_id })
    .then(response => {
       callable(response)
    }).catch(error => console.log(error))
}

const event_admin = function() {
    let type = $(this).data('type')

    let btn_stack_call = ['lastcall','close','open','close']

    if(btn_stack_call.includes(type)) {
        fire_open_close(type)
    }

    else if(type == 'create') {
        add_fight()
    }

    else if(type == 'message') {
        add_msg()
    }

    else if(type == 'declare') {
        declare()
    }
    
}

const reset_event = function() {

    Swal.fire({
        title: 'Are you sure to reset this event?',
        icon: 'question',
        showCancelButton: true,
        cancelButtonText: 'No',
        confirmButtonText: 'Yes'
        }).then((confirm) => {
            if(confirm.isConfirmed) {

                send_reset_event((response) => {

                    if( response.data.status === true ) {
                        Swal.fire(response.data.message, '', 'success')
                    } else {
                        Swal.fire(response.data.message, '', 'error')
                    }

                })
                
            }
        })

}

const send_reset_event = (callable) => {
    axios.post('/reset/event')
         .then(response => {
            callable(response)
         }).catch(error => console.log(error))
}

const alert_bet = function() {
    let type = $(this).data('type')
    let bet_input = $('.bet-input')

    Swal.fire({
    title: 'Are you sure to bet in ' + type,
    icon: 'question',
    showCancelButton: true,
    cancelButtonText: 'No',
    confirmButtonText: 'Yes'
    }).then((confirm) => {
        if(confirm.isConfirmed) {

            if(bet_input.val() != '') {
                let data = {
                    bet_type : $(this).data('type'),
                    amount : bet_input.val()
                }

                add_bet(data,(response) => {

                    if( response.data.status === true ) {
                        Swal.fire(response.data.message, '', 'success')
                    } else {
                        Swal.fire(response.data.message, '', 'error')
                    }

                },(errors) => {
                    Swal.fire('Failed to bet! Something\'s wrong', '', 'error')
                    console.log(errors)
                })

            } else {
                Swal.fire('Please specify your amount!', '', 'error')
                
            }
            
        }
    })
}



const fire_open_close = (data) => {

    Swal.fire({
        title: 'Are you sure to ' + data + ' this fight?',
        icon: 'question',
        showCancelButton: true,
        cancelButtonText: 'No',
        confirmButtonText: 'Yes'
        }).then((confirm) => {
            if(confirm.isConfirmed) {

                if(data == 'lastcall') {

                    send_log_msg('Last Call to place your bet!',(response) => {

                        if(response.status) {
                            notifier(response.message)
                        }

                    })

                } else {
                    send_open_close(data,(response) => {

                        if(response.status) {
                            notifier(response.message)
                        }

                    })
                }
                
            }
        })
}

const interval = () => {

    status((response) => {
        bet_content(response.data)
    })

    if(hasSubject == true) {

        hasTimeout = true
        
        var element = document.querySelector(".chat-box")
        if (element.scrollHeight - element.scrollTop === element.clientHeight) {
            load_chat(1,subject_id)
        }
    }

    setTimeout(interval,2000)
}

const declare = () => {

    const inputOptions = new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            'meron': 'Meron',
            'wala': 'Wala',
            'draw': 'Draw',
            'cancel': 'Cancel',
            'reopen': 'Reopen',
            'redeclare': 'Redeclare'
          })
        }, 1000)
      })
      
       Swal.fire({
        title: 'Select to declare',
        input: 'radio',
        customClass: {
            input: 'my-radio'
        },
        inputOptions: inputOptions,
        confirmButtonText: 'Declare',
        inputValidator: (value) => {
          if (!value) {
            return 'You need to choose something!'
          }
        }

      }).then(function(result) {

        if(result.isConfirmed) {

            let select = result.value

            send_declaration(select,(response) => {

                if(response.status) {
                    Swal.fire(response.message + '', '', 'success')
                } else {
                    Swal.fire(response.message + '', '', 'error')
                }

            })

        }

     })
}

const add_msg = () => {
      Swal.fire({
        title: 'Enter your custom message',
        input: 'text',
        inputLabel: 'Enter your message here',
        inputPlaceholder: 'Message...',
        showCancelButton: true,
        cancelButtonText: 'No',
        confirmButtonText: 'Yes',
        inputValidator: (value) => {
            if (!value) {
              return 'You need to write something!'
            }
        }
      }).then(function(result) {

        if(result.isConfirmed) {

            let message = result.value

            if(message.length > 0) {

                send_log_msg(message,(response) => {

                    if(response === '') {
                        Swal.fire('Message successfully created', '', 'success')
                    }
                })

            }

        }

      })
}

const send_declaration = (response,callable) => {
    axios.post('/bet/declare/fight', {declare:response})
         .then(response => {
            callable(response.data)
         }).catch(error => console.log(error))
}

const add_fight = () => {

    Swal.fire({
        icon: 'question',
        title: 'Create new fight?',
        inputLabel: 'Enter fight number',
        inputPlaceholder: 'Fight no...',
        input: 'number',
        showCancelButton: true,
        cancelButtonText: 'No',
        confirmButtonText: 'Yes'
      }).then(function(result) {

        if(result.isConfirmed) {

            let fight_no = result.value

            if(fight_no.length > 0) {
                add_fight_to_server(fight_no,(response) => {

                    if(response.status) {
                        Swal.fire('Fight successfully created', '', 'success')
                    } else {
                        Swal.fire(response.message, '', 'error')
                    }
    
                })
            } else {
                Swal.fire('Please specify fight number', '', 'error')
            }

        }

      })

}

const send_log_msg = (data,callable) => {
    axios.post('/bet/msg', {response:data})
         .then(response => {
            callable(response.data)
         }).catch(error => console.log(error))
}

const send_open_close = (data,callable) => {
    axios.post('/bet/fire', {response:data})
         .then(response => {
            callable(response.data)
         }).catch(error => console.log(error))
}

const add_fight_to_server = (data,callable) => {
    axios.post('/bet/add/fight', {fight_no:data})
    .then(response => {
       callable(response.data)
    }).catch(error => console.log(error))
}

var timeout
const notifier = (message) => {

    clearTimeout(timeout)
    $('.marquee').css('display','block')
    $('.marquee > p').text(message)
    timeout = setTimeout(() => {
        $('.marquee').css('display','none')
    },5000)
}

const bet_content = (data) => {
  
    $('.points').text(data.current_points)
    $('.t_left').text(data.left_side_total_bet)
    $('.t_right').text(data.right_side_total_bet)
    $('.m-left').text(data.left_side_total_percentage)
    $('.m-right').text(data.right_side_total_percentage)
    $('.fight_no').text('#' + data.current_fight_no)
    $('.payout-left').text(data.left_user_payout)
    $('.payout-right').text(data.right_user_payout)
    $('.bet-btn-load').prop('disabled', data.cant_bet)

    if(data.cant_bet) {
        $('.btn-bet').text('CLOSED')
        $('.btn-bet').removeClass('btn-primary')
        $('.btn-bet').addClass('btn-warning')
    } else {
        $('.btn-bet').text('OPEN')
        $('.btn-bet').removeClass('btn-warning')
        $('.btn-bet').addClass('btn-primary')
    }

    if(data.notif_user_status) {
        notif_user(data.notif_user_msg)
    }

    if(data.request_user_status) {
        notif_user(data.request_user_msg)
    }

    receive_msg_log(data)
    
    my_history(data.betting_logs)
    trends(data.trending)

}

const notif_user = (data) => {
    Swal.fire(
        'Notification Alert!',
        data + '',
        'info'
      )
}

const receive_msg_log = (message) => {
    
    if(message.msg_log_status)
        notifier(message.msg_log_content)
}

const my_history = (logs) => {

    var log = ''

    $.each(logs,function(key,val) {

        log += '<div class="rows mt-1"><div class="dotted-color">' + val.fight_no + '</div>'
        log += '<div class="container-d">'
        log += '<div class="info_of">'
        log += '<span class="type_of">' + val.side + '</span>'
        log += '<span class="amount_of">' + val.bet + '</span>'
        log += '</div>'
        log += '<div class="info_of right_info">'
        log += '<span class="type_of">' + val.action + '</span>'
        log += '<span class="amount_of">' + val.amount + '</span>'
        log += '</div>'
        log += '</div>'
        log += '</div>'
    })

    $('.append_history').html(log)

    if(log === '') {
        $('.history-card').fadeOut()
    } else {
        $(".history-card").fadeIn()
        $(".history-card").removeClass('hidden')
        $(".history-card").css('display','')
    }

}

const trends = (data) => {

    var json = data

    var counts;
   
    for (var i = 0; i < json.length; i++) {
    if (!counts || parseInt(json[i]["count"]) > parseInt(counts["count"]))
        counts = json[i];
    }

    var data = '';
    data += "<table>"
    $.each(json, function(key, val) {
  
        var new_count = counts.count - val.count
    if (val.count > 1) {

        data += '<tr>'
        for (let i = 0; i < val.count; i++) {
             add_colors(val.fight_declaration);
        }
    

        while (new_count > 0) {

            data += '<td></td>'
            new_count--;
        }

        data += '</tr>'

    } else {
        data += '<tr>'
        add_colors(val.fight_declaration);
        
        while (new_count > 0) {

            data += '<td></td>'
            new_count--;
        }

        data += '</tr>'

    }
    })
    data += "</table>"
  
    var datas = $(data).each(function() {
    var $this = $(this);
    var newrows = [];
   
    $this.find("tr").each(function() {
        var i = 0;
       
        $(this).find("td").each(function() {
        if (newrows[i] === undefined) {
            newrows[i] = $("<tr></tr>");
        }
        newrows[i].append($(this));
        i++;
        });
    });
   
    $this.find("tr").remove();

    $.each(newrows, function() {
        $this.append(this);
    });
    });

    $("table.trend-table").html($(datas).html())

    $("table.trend-table > tbody > tr").each(function(elem,index){
        var arr = $.makeArray($("td",this).detach());
        arr.reverse();
          $(this).append(arr);
    });

    if (json.length == 0) {
        $('.trend-card').fadeOut()
    } else {

        $(".trend-card").fadeIn()
        $(".trend-card").removeClass('hidden')
        $(".trend-card").css('display','')
           
    }

    function add_colors(values) {

        if (values == 1) {
            data += '<td><div class="meron-dot"></div></td>'
        } else if (values == 2) {
            data += '<td><div class="wala-dot"></div></td>'
        } else if (values == 3) {
            data += '<td><div class="draw-dot"></div></td>'
        } else if (values == 4) {
            data += '<td><div class="cancel-dot"></div></td>'
        }

    }
}

const add_bet = (bet_data,callable,errors) => {
    axios.post('/bet/add', bet_data)
         .then(response => {
            callable(response)
         }).catch(error => errors(error))
}

const status = (callable) => {
    axios.post('/bet/status')
         .then(response => {
             callable(response)
         }).catch(error => console.log(error))
}

const bet_hold_btn = function() {
    let data_amount = $(this).data('amount')
    let input = $('.bet-input')
    let current_points = $('.points').text().replace(/[ ,]/g, '')

    if(data_amount == 'all-in') {
        input.val(current_points)
    } else {
        input.val(data_amount)
    }
}

const btn_clear = function() {
    let input = $('.bet-input')

    if(input.val().length == 0) {
        Swal.fire('Nothing to clear!', '', 'error')
    } else {
        input.val('')
    }
}


$('.bet-btn').click(alert_bet)
$('.btn-bet-hold').click(bet_hold_btn)
$('.btn-clear').click(btn_clear)
$('.btn-admin').click(event_admin)
$('.btn-reset-event').click(reset_event)

$('.nav-side > li').each((k,v) => {

   let anchor = $(v).find('a').attr('href')

   if(anchor === pathname) {
       $(v).addClass('active')
   }

})

interval()

$('#videoplayer').mediaelementplayer({
    hls: {
        autoStartLoad: true,
        capLevelToPlayerSize: true,
        capLevelOnFPSDrop: true,
        liveSyncDuration: true,
    },
    features: ['volume'],
    autoplay: true,
    autoStartLoad: true,
    renderers: ['native_hls', 'html5'],
    preload: 'manifest',
    hideVideoControlsOnLoad: true,
    controls: false,
    forceLive: true,
    success: function(media, node, instance) {
        media.addEventListener('play', function (event, data) {
            var currentTime = media.getCurrentTime()
            media.setCurrentTime(999999999999999999999);
        });

        media.addEventListener('loadedmetadata', function (event, data) {
            media.play()
        })
    },
    // Do not forget to put a final slash (/)
    pluginPath: 'https://cdnjs.com/libraries/mediaelement/',
    // this will allow the CDN to use Flash without restrictions
    // (by default, this is set as `sameDomain`)
    shimScriptAccess: 'always'
    // more configuration
});